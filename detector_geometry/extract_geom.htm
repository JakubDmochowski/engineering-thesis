<!DOCTYPE html>
<html lang="en">
   <head>
      <!-- as prototype used: https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometries.html -->
      <title>three.js model for TGeo object</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
      <style>
         body {
            font-family: Monospace;
            background-color: #000;
            margin: 0px;
            overflow: hidden;
         }
      </style>
   </head>
   <body>

      <!-- use three.js from JSROOT -->
      <script src="https://threejs.org/build/three.js"></script>
      <script src="https://threejs.org/examples/js/libs/stats.min.js"></script>
      <script src="../scripts/d3.min.js" type="text/javascript"></script>
      <script src="../scripts/JSRootCore.js" type="text/javascript"></script>
      <script src="../libs/three.extra.js" type="text/javascript"></script>
      <script src="../scripts/ThreeCSG.js" type="text/javascript"></script>
      <script src="../scripts/JSRootGeoBase.js" type="text/javascript"></script>
      <script src="../scripts/JSRootPainter.js" type="text/javascript"></script>
      <script src="../scripts/JSRootPainter.hierarchy.js" type="text/javascript"></script>
      <script src="../scripts/JSRoot3DPainter.js" type="text/javascript"></script>
      <script src="../scripts/JSRootGeoPainter.js" type="text/javascript"></script>
      <script type="module">
         var filename = "../files/o2sim_geometry.root"
         var outputFilename = "AliceGeometry.json"
         var mergeGeometries = true

         var container, stats
         var camera, scene, renderer, geom_size = 400, dummy = null

         function download(data, filename) {
                   
            var a = document.createElement("a")
            a.style = "display: none"
            const file = new Blob(data, { type: 'text/plain' })
            const url = window.URL.createObjectURL(file)
            a.href = url
            a.download = filename
            a.click()
            window.URL.revokeObjectURL(url)
         }

         function getPositionMatrix(node) {
            if(!node) return new THREE.Matrix4()
            if(!node.parent) {
               return node.matrix
            } else {
               node.updateMatrixWorld()
               node.applyMatrix4(getPositionMatrix(node.parent))
               return node.matrix
            }
         }

         function mergeGeometriesRecursively(mergeGeom, node) {
            if(node instanceof THREE.Mesh) {
               let geom = new THREE.Geometry()
               mergeGeom.merge(geom.fromBufferGeometry(node.geometry), getPositionMatrix(node))
            }
            node.children.forEach(child => {
               mergeGeometriesRecursively(mergeGeom, child)
            })
         }

         function getMergedMesh(geom) {
            const tmpGeom = new THREE.Geometry()
            const mergeMaterial = new THREE.MeshLambertMaterial()
            mergeGeometriesRecursively(tmpGeom, geom)
            const mergeGeom = (new THREE.BufferGeometry()).fromGeometry(tmpGeom)
            return new THREE.Mesh(mergeGeom, mergeMaterial)
         }

         function init() {

            container = document.createElement( 'div' );
            container.id = "exportObj"
            document.body.appendChild( container );
            
            var hpainter = new JSROOT.HierarchyPainter('root', "exportObj");
            camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, geom_size*5 );
            camera.position.y = geom_size;

            scene = new THREE.Scene();
            scene.add( new THREE.AmbientLight( 0x404040 ) );

            var light = new THREE.DirectionalLight( 0xffffff );
            light.position.set( 0, 1, 0 );
            scene.add( light );

            // ------------------- reading geometry object --------------------------

            
            if (filename.indexOf(".root")>0) {
               hpainter.OpenRootFile(filename, function(file) {
                  var divid = hpainter.divid
                  var obj = hpainter.h
                  var opt = null
                  var itemname = "o2sim_geometry.root/FAIRGeom;1"
                  hpainter.get(itemname, (item, obj) => {
                     JSROOT.draw(divid, obj, opt, ({ _scene: scene }) => {
                        const geom = scene.children.find(c => c.type !== 'PerspectiveCamera')
                        let mesh = mergeGeometries ? getMergedMesh(geom) : geom
                        let data = [JSON.stringify(mesh.toJSON())]
                        download(data, outputFilename)
                     })
                  })
               });
               } else {
                  console.log("Format not known, please provide .root file!")
               }

            // ------------------- end of reading geometry object --------------------------

            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );

            container.appendChild( renderer.domElement );
            const controls = new OrbitControls(camera, renderer.domElement)
            controls.update()


            stats = new Stats();
            container.appendChild( stats.dom );
            //
            window.addEventListener( 'resize', onWindowResize, false );

            animate();
         }

         function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );

         }


         function animate() {

            requestAnimationFrame( animate );

            render();
            stats.update();

         }

         function render() {

            var timer = Date.now() * 0.0001;

            // set rendering order for transparent volumes, create with JSROOT
            JSROOT.GEO.produceRenderOrder(scene, camera.position, 'dflt');

            renderer.render( scene, camera );

         }
         init()
      </script>
   </body>
</html>
